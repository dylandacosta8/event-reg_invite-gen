name: CI/CD Pipeline

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.12]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: lazybit/minio
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: password
        ports:
          - 9000:9000
          - 9001:9001
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 && break || sleep 5;
          done

      - name: Wait for MinIO
        run: |
          for i in {1..10}; do
            curl -f http://localhost:9000/minio/health/live && break || sleep 5;
          done
      
      - name: Create MinIO bucket for testing
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: password
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x ./mc
          mc alias set local http://127.0.0.1:9000 admin password
          mc mb local/qr-codes
          mc policy set public local/qr-codes

      - name: Validate environment variables
        run: |
          if [ -z "$DATABASE_URL" ] || [ -z "$MINIO_ROOT_USER" ]; then
            echo "Required environment variables are missing!" && exit 1;
          fi

      - name: Run tests with Pytest
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: password
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb
        run: pytest

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: dylan08/is601_final:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=dylan08/is601_final:cache
          cache-to: type=inline,mode=max
          
      - name: Scan the Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dylan08/is601_final:${{ github.sha }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
